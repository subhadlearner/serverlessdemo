
service: sls-notes-backend

plugins:
  - serverless-offline
  - serverless-plugin-warmup

custom:
  allowedHeaders:
    - Accept
    - Content-Type
    - Content-Length
    - Authorization
    - app_user_id
    - app_user_name
  # Plugin Configuration
  warmup:
    enabled: true
    memorySize: 128
    name: ${self:service}-${opt:stage}-warmup
    events:
      - schedule: 'cron(0/5 8-17 ? * MON-FRI *)'
    timeout: 60


provider:
  name: aws
  runtime: nodejs10.x
  region: us-east-1
  stage: dev
  memorySize: 128
  timeout: 5
  endpointType: regional
  environment:
    NOTES_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    DEPLOY_REGION:  ${opt:region, self:provider.region}
  iamRoleStatements:   #${file(./iamRoleStatements.yml)}
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}/index/*"
functions:     #${file(./functions.yml)}
  add-note:
    handler: api/add-note.handler
    description: POST /note
    warmup:
      enabled: false
    events:
      - http:
          path: note
          method: post
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  update-note:
    handler: api/update-note.handler
    description: PATCH /note
    warmup:
      enabled: false
    events:
      - http:
          path: note
          method: patch
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  get-notes:
    handler: api/get-notes.handler
    description: GET /notes
    warmup:
      enabled: true
    events:
      - http:
          path: notes
          method: get
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  get-note:
    handler: api/get-note.handler
    description: GET /note/n/{note_id}
    warmup:
      enabled: true
    events:
      - http:
          path: note/n/{note_id}
          method: get
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  delete-note:
    handler: api/delete-note.handler
    description: DELETE /note
    warmup:
      enabled: false
    events:
      - http:
          path: note/t/{timestamp}
          method: delete
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

resources: #${file(./resources.yml)}
  Resources:
    NotesTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.NOTES_TABLE}
        AttributeDefinitions:
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
          - AttributeName: note_id
            AttributeType: S
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: note_id-index
            KeySchema:
              - AttributeName: note_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

